from basic_functions import count_of_total_index
from basic_functions import reconstruction

def priority(list): 
    prioritizer = {"*": 3, "True": 2, ",": 1}
    current = []
    count_total = count_of_total_index(list)
    index_a = -1 
    for a in list:
        index_a += 1 
        if index_a != count_total:
            if isinstance(list[index_a], (float, int)) == True: 
                if isinstance(list[index_a +1], (float, int)) == True: 
                    current.append(prioritizer["True"])
            elif list[index_a] == "*":
                if list[index_a +1] == "*": 
                    current.append(prioritizer["*"])
            elif list[index_a] == ",": 
                if isinstance(list[index_a+1], (float, int)) == True: 
                    current.append(prioritizer[","])
    
    current=sorted(current)
    current = current[-1]
    
    

    return current




def more_than_2_new(list):  
    recon_struction_list = []
    index_a = -1
    count = 0 
    prioritizer = {"*": 3, "True": 2, ",": 1}
    priority_ = priority(list)
    print(priority_)
    count_total = count_of_total_index(list)
    for a in list:
        index_a += 1 
        print()
        print(index_a)
        print(list) 
        print(a)
        print("list[index_a]")
        print(list[index_a])
        if index_a > 0:
            if isinstance(list[index_a], (float, int)) == True:
                if isinstance(list[index_a -1], (float, int)) == True:
                    current = "True"
                    if prioritizer[current] == priority_:
                        new_num = str(int(list[index_a])) + str(int(list[index_a +1]))
                        new_num = float(new_num)
                        #reconstruction 
                        recon_struction_list = reconstruction(index_a, index_a +1 , new_num, list)
                elif list[index_a -1] == ",": 
                    current = ","
                    if prioritizer[current] == priority_:
                        new_num = str(int(list[index_a-2])) + "," + str(int(list[index_a]))
            elif list[index_a] == "*":
                current = "*"
                if prioritizer[current] == priority_:
                    if list[index_a -1] == "*":
                        count += 1
                        new_op = list[index_a] + list[index_a +1]
                        recon_struction_list = reconstruction(index_a, index_a +1, new_op, list)

        if len(recon_struction_list) != 0: # this is key. Because as long as the list is not none-existent it will return it. 
            return recon_struction_list

        
        
def iterations_needed(list):
    counter_iterations = 0
    counter = -1
    count_total = count_of_total_index(list)
    for a in list: 
        counter += 1
        if counter != count_total: 
            if isinstance(list[counter], (int, float)):
                if isinstance(list[counter+1], (int, float)):
                    counter_iterations += 1
            elif a == ",":
                counter_iterations += 1
            if list[counter] == "*":
                if list[counter +1] == "*": 
                    counter_iterations += 1

    return counter_iterations


def more_than_2_complete(list):
    in_range = iterations_needed(list) 
    print(in_range)
    print(list)
    for a in range(in_range):
        list = more_than_2_new(list)

    return list 

list = [1.0, "+",4.0, 7.0, 9.0, ",", 3.0, 2.0]
list = more_than_2_complete(list)
print(list)
