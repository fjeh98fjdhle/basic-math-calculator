from engine import calculate
from engine import more_than_2_complete 
from engine import list_encoding


#entfernen von f(x) = 
def cleaning_fx():
    Funktion_f = input("function: ")
    Funktion_f = list(Funktion_f)
    for w in Funktion_f:
        if w == "=": 
            equal_index = Funktion_f.index("=") + 1
            Funktion_f = Funktion_f[equal_index:] 
        else:
            Funktion_f = Funktion_f
    #rekonstruieren der Funktion
    num_store = '' # equation-storing
    for w in Funktion_f: 
        num_store += w #now the equation is rewritten as a string. 
    return num_store 

def restoring_func(list):
    list_var = []
    list = list
    # restoring in a list with correct dtype.
    num_store = []
    index_count = -1
    for w in list: 
        index_count += 1
        if w == "+":
            num_store.append(w)
        elif w == "*": 
            num_store.append(w)
        elif w == "/": 
            num_store.append(w)
        elif w == "-": 
            num_store.append(w)
        elif w == ",":
            num_store.append(w)
        elif w == "(": 
            num_store.append(w)
        elif w == ")":
            num_store.append(w)
        elif w == ".":
            num_store.append(",")
        elif w == "1":
            num_store.append(float(w))
        elif w == "2":
            num_store.append(float(w))
        elif w == "3":
            num_store.append(float(w))
        elif w == "4":
            num_store.append(float(w))
        elif w == "5":
            num_store.append(float(w))
        elif w == "6":
            num_store.append(float(w))
        elif w == "7":
            num_store.append(float(w))
        elif w == "8":
            num_store.append(float(w))
        elif w == "9":
            num_store.append(float(w))
        elif w == "0":
            num_store.append(float(w))                                       
        else:
            num_store.append(w)
            list_var.append(w)

    #return the list together with the list of variables, the list of the indexes.
    return_list_and_variables = []
    a = len(num_store)
    return_list_and_variables.append(a)
    for w in num_store: 
        return_list_and_variables.append(w)
    return_list_and_variables.append(list_var)
    
    return return_list_and_variables

def exchange_x(list): 
    # in the list that I got from above it is not clear when in the list the variables start. that is the "number", the first value from the list. 
    number = list[0]
    number = number + 1 #number represents the true lenght of the equation. For applying the "stop" in the list a few lines below we need to add by one because the stop doesn't include the given number. 
    #to manipulate the initial list we create an initial list.
    intial_list = list
    #we take out the number that tells us where the variables start and take out the rest of the appended variables so that we only have the pure equation. 
    list = list[1:number]
    list_var = []
    for a in intial_list[number:]:
        a = a 
        for var in a:
            list_var.append(var)
    
    map_var_collection = {} # collects the individual values for all the variables and maps them to the value of the input. 

    #value mapping.

    #maps the values of the variables to undone. So by default they are undone. 
    var_map = {}
    list_checked = []
    list_checked.append("value_iniatilization") # the value is added so that the loop is started in the first place. Otherwise the "for var in list_checked" 
    #value is going to be non-existent so the loop is never going to be initialized since it will not work on either the if nor the elif statement 
    for a in list_var:
        for var in list_checked:
            #if a is a value that has already been checked of then it will do nothing.  
            if a == var: 
                var = "Test"
            #Otherwise, if a is not a value that has not yet been checked off then it will map it to "undone"
            elif a != var:
                var_map[a] = "undone"
                list_checked.append(a)

    #basically first I create a mapper that maps wether a variable(by the name) is done or undone. This is nice so that I don't map a value twice. This is done through assigning a value to the function
    #and once that value is assigned you write it off. then you create another if statement where you basically say that if the mapping is "done" of that variable then there will be no value mapping to that variable. 
    for a in list_var: 
        if var_map[a] == "done": 
            var = a
        elif var_map[a] == "undone":
            a_value = input("give value for " + a +":")
            name = a 
            a_value = list_encoding(a_value)
            a_value = more_than_2_complete(a_value)
            a_value = a_value[0]
            map_var_collection[name] = a_value
            var_map[a] = "done"
    
    #value adding to the function. 
    count_index = -1
    for a in list:
        count_index += 1
        for var in list_var:
            if a == var:
                list[count_index] = map_var_collection[a]

    return list


def collect_func():
    #list processing
    list = cleaning_fx()
    list = restoring_func(list)
    list = exchange_x(list)
    return list 

def start():
    list = collect_func()
    print(list)
    list = calculate(list)

    return list

a = start()
print(a)
